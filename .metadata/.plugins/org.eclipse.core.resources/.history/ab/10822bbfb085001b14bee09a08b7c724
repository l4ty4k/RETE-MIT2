package hu.bme.mit.yakindu.analysis.workhere;

import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.junit.Test;
import org.yakindu.sct.model.sgraph.State;
import org.yakindu.sct.model.sgraph.Statechart;

import hu.bme.mit.model2gml.Model2GML;
import hu.bme.mit.yakindu.analysis.modelmanager.ModelManager;
import org.yakindu.sct.model.sgraph.Transition;
import org.yakindu.sct.model.stext.stext.impl.EventDefinitionImpl;
import org.yakindu.sct.model.stext.stext.impl.VariableDefinitionImpl;

public class Main {
	@Test
	public void test() {
		main(new String[0]);
	}
	
	public static void main(String[] args) {
		ModelManager manager = new ModelManager();
		Model2GML model2gml = new Model2GML();
		
		// Loading model
		EObject root = manager.loadModel("model_input/example.sct");
		
		// Reading model
		Statechart s = (Statechart) root;
		TreeIterator<EObject> iterator = s.eAllContents();
		int nameIterator = 1;
		while (iterator.hasNext()) {
			EObject content = iterator.next();
			if(content instanceof State) {
				State state = (State) content;
				for (Transition trans : state.getOutgoingTransitions()) {
 					State next = (State) trans.getTarget();
 					System.out.println(state.getName() + " -> " + next.getName());
 				}
				
				if(state.getOutgoingTransitions().isEmpty()) {
					System.out.println("It's a trap" + state.getName());
				}
				
				if(state.getName().isEmpty()) {
					System.out.println("State has non name, it could be: state_" + nameIterator);
				}
					
			}
			else if (content instanceof EventDefinitionImpl) {
				EventDefinitionImpl eventDef = (EventDefinitionImpl) content;
				System.out.println("Event: " + eventDef.getName());
			}
			else if (content instanceof VariableDefinitionImpl) {
				VariableDefinitionImpl variableDef = (VariableDefinitionImpl) content;
				System.out.println("Variable: " + variableDef.getName());
			}
		}
		
		// Transforming the model into a graph representation
		String content = model2gml.transform(root);
		// and saving it
		manager.saveFile("model_output/graph.gml", content);
	}
}
